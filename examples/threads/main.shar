module Main

def main()
    const mainToWorker Pipeline = Pipeline()
    const workerToMain Pipeline = Pipeline()
    println("Random number: " + const::staticRandomNumber.toString())
    worker(PipelineOut(mainToWorker), PipelineIn(workerToMain))
    worker(PipelineOut(mainToWorker), PipelineIn(workerToMain))
    worker(PipelineOut(mainToWorker), PipelineIn(workerToMain))
    worker(PipelineOut(mainToWorker), PipelineIn(workerToMain))
    mainToWorker.push(const::staticRandomNumber)
    for :(counter Int = 0) counter < 4; counter++
        for :(loop)
            const number <>Int = workerToMain.pop()
            if !number.nothing?()
                println("Main thread: " + number.toString())
                mainToWorker.push(number * 2)
                end loop
            yield()

#worker
def worker(in PipelineOut, out PipelineIn)
    for :(loop)
        const number <>Int = in.pop()
        if !number.nothing?()
            println("Worker thread: " + number.toString())
            out.push(number + 123)
            end loop
        yield()
