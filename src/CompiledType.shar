module Main

// Compiled type.
type CType
    // export?    Bool
    // fullName   String
    // groups     Set of String

attach CType to FieldExport
    #alwaysinline
    def export?(type CType) Bool
        return type.typeGetItem(0)

    #alwaysinline
    def export`(write type CType, new Bool) Bool
        return type.typePut(0, new)

attach CType to FieldFullName
    #alwaysinline
    def fullName~(type CType) String
        return type.typeGetItem(1)

    #alwaysinline
    def fullName`(write type CType, new String) String
        return type.typePut(1, new)

attach CType to FieldGroups
    #alwaysinline
    def groups~(type CType) Set
        return type.typeGetItem(2)

    #alwaysinline
    def groups`(write type CType, new <>Set) <>Set
        return type.typePut(2, new)

#alwaysinline
def CType(isExport Bool, fullName String, groups Set) CType
    return CType.fromList({isExport, fullName, groups})

attach CType to BinarySerializable
    #alwaysinline
    def serialize(type CType, write bytes Bytes)
        const isExport Bool = type.export?()
        const fullName String = type.fullName~()
        const shortName String = fullName.splitByPart("::")[1]
        const groups Set = type.groups~()
        isExport.serialize(bytes)
        shortName.serialize(bytes)
        groups.length~().serialize(bytes)
        parse _, group = groups
            group.serialize(bytes)

    #alwaysinline
    def deserialize(noread type CType, bytes Bytes, write position Int) CType
        const startPosition Int = position
        try
            const isExport Bool = Bool.deserialize(bytes, position)
            const name String = String.deserialize(bytes, position)
            const groupsCount Int = Int.deserialize(bytes, position)
            var groups Set = Set()
            for :(counter Int = 0) counter < groupsCount; counter++
                groups.add(String.deserialize(bytes, position))
            return CType(isExport, name, groups)
        catch id, message
            position = startPosition
            throw(id, message)
