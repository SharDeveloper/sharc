module Main

// The data that is used when compiling the program code.
type CodeData
    functionNameForErrorMessage String
    allThisGroups               Set     // Set(String)
    resultType                  COType
    namedOperands               Map     // Map(name String, operand NamedOperand)
    level                       Int
    registerCounter             Int
    endLabels                   Map     // Map(name String, Label)
    nextLabels                  Map     // Map(name String, Label)
    fallthroughLabels           Map     // Map(name String, Label)
    catchLabels                 Array   // [Label]
    newVariableNumber           Int
    errorVariableRegister       String
    unusedVariables             Array   // [String]
    ownerNoThrow                Bool
    defaultFunctionName         String
    thisTypeRegister            String
    threadDataRegister          String
    overridedThisType           String
    changingVariables           Set     // Set(String)

// The function creates a new llvm ir register for the label.
def createLabel(write codeData CodeData) String
    const registerName String = codeData.registerCounter~().toString()
    codeData.registerCounter`(codeData.registerCounter~() + 1)
    return registerName

// The function releases all operands declared at the specified level and above.
def freeLevel(write codeData CodeData, level Int, compiledData CData, write ir String)
    parse _, operand NamedOperand = codeData.namedOperands~()
        if operand.level~() >= level
            operand.operand~().freeOperand(codeData, compiledData, ir)

// The function removes operands without freeing them, it also sets the current level to one less than the specified level.
def deleteLevel(write codeData CodeData, level Int)
    var namedOperands Map = codeData.namedOperands`(Map())
    var unusedVariables Array = codeData.unusedVariables`([])
    var changingVariables Set = codeData.changingVariables`(Set())
    var needToDetele Array = []
    parse name String, operand NamedOperand = namedOperands
        if operand.level~() >= level
            needToDetele.addItem(name)
            if !operand.used?()
                warningDeclaredButNotUsed(operand.operand~().code~(), (operand.operand~().access~() == Access[write]).select("Variable", "Constant"))
            if operand.operand~().access~() == Access[write]
                if !changingVariables.remove(name)
                    warningNotChangeVariable(operand.operand~().code~())
                unusedVariables.addItem(operand.operand~().value~())
    parse _, name String = needToDetele
        namedOperands.put(name, nothing)
    codeData.namedOperands`(namedOperands)
    codeData.unusedVariables`(unusedVariables)
    codeData.changingVariables`(changingVariables)
    codeData.level`(level - 1)

// The function returns a register with memory allocated on the stack.
def newVariable(write codeData CodeData) String
    var register String = ""
    if codeData.unusedVariables~().empty?()
        register = "%" + codeData.newVariableNumber~().toString()
        codeData.newVariableNumber`(codeData.newVariableNumber~() + 1)
    else
        var unusedVariables Array = codeData.unusedVariables`([])
        register = unusedVariables[unusedVariables.length() - 1]
        unusedVariables.delete(unusedVariables.length() - 1, 1)
        codeData.unusedVariables`(unusedVariables)
    return register

def markVariableAsChanged(write codeData CodeData, variable String)
    var changingVariables Set = codeData.changingVariables`(Set())
    changingVariables.add(variable)
    codeData.changingVariables`(changingVariables)

def getErrorVariableRegister(write codeData CodeData) String
    var result String = codeData.errorVariableRegister~()
    if result.empty?()
        result = codeData.newVariable()
        codeData.errorVariableRegister`(result)
    return result
