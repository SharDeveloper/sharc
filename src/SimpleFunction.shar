module Main

// A type for storing data for a simple function.
type SimpleFunction
    // attributes        FAttributes
    // signature         FSignature
    // llvmIR            String
    // fromCurrentModule Bool

attach SimpleFunction to FieldAttributes
    #alwaysinline
    def attributes~(function SimpleFunction) FAttributes
        return function.typeGetItem(0)

    #alwaysinline
    def attributes`(write function SimpleFunction, new <>FAttributes) <>FAttributes
        return function.typePut(0, new)

attach SimpleFunction to FieldSignature
    #alwaysinline
    def signature~(function SimpleFunction) FSignature
        return function.typeGetItem(1)

    #alwaysinline
    def signature`(write function SimpleFunction, new <>FSignature) <>FSignature
        return function.typePut(1, new)

attach SimpleFunction to FieldLLVMIR
    #alwaysinline
    def llvmIR~(function SimpleFunction) String
        return function.typeGetItem(2)

    #alwaysinline
    def llvmIR`(write function SimpleFunction, new String) String
        return function.typePut(2, new)

attach SimpleFunction to FieldFromCurrentModule
    #alwaysinline
    def fromCurrentModule?(function SimpleFunction) Bool
        return function.typeGetItem(3)

    #alwaysinline
    def fromCurrentModule`(write function SimpleFunction, new Bool) Bool
        return function.typePut(3, new)

#alwaysinline
def SimpleFunction(attributes FAttributes, signature FSignature, llvmIR String, fromCurrentModule Bool) SimpleFunction
    return SimpleFunction.fromList({attributes, signature, llvmIR, fromCurrentModule})

attach SimpleFunction to BinarySerializable
    #alwaysinline
    def serialize(sFunction SimpleFunction, write bytes Bytes)
        const attributes FAttributes = sFunction.attributes~()
        const signature FSignature = sFunction.signature~()
        const llvmIR String = sFunction.llvmIR~()
        attributes.serialize(bytes)
        signature.serialize(bytes)
        llvmIR.serialize(bytes)

    #alwaysinline
    def deserialize(noread type SimpleFunction, bytes Bytes, write position Int) SimpleFunction
        const startPosition Int = position
        try
            const attributes FAttributes = FAttributes.deserialize(bytes, position)
            const signature FSignature = FSignature.deserialize(bytes, position)
            const llvmIR String = String.deserialize(bytes, position)
            return SimpleFunction(attributes, signature, llvmIR, false)
        catch id, message
            position = startPosition
            throw(id, message)
