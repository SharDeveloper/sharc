module Main

// Information about what type to which group should be placed and what functions are provided for this.
type Attachment
    type        Token
    group       Token
    functions   Map // Map(name String, Function)

// The function adds types to groups.
def addTypesToGroups(attachments Array, write compiledData CData)
    var groupedAttachments Map = Map()
    parse _, attachment Attachment = attachments
        var existedAttachments <>Array = groupedAttachments.put(attachment.type~().text~(), [])
        if existedAttachments.nothing?()
            existedAttachments = []
        existedAttachments.addItem(attachment)
        groupedAttachments.put(attachment.type~().text~(), existedAttachments)
    parse _, attachmentsOfOneType Array = groupedAttachments
        var compiledType CType = compiledData.getType(attachmentsOfOneType[0].type!(Attachment).type~(), false)
        if compiledType.fullName~() == "STD::Nothing"
            errorNotExpectedToken(attachmentsOfOneType[0].type!(Attachment).type~(), "")
        parse _, attachment Attachment = attachmentsOfOneType
            const group CGroup = compiledData.getGroup(attachment.group~(), false)
            if group.fullName~() == "STD::Type" || group.fullName~() == "STD::Primitive" || group.fullName~() == "STD::Enumeration"
                errorNotExpectedToken(attachment.group~(), "")
            var compiledTypeGroups Set = compiledType.groups`(Set())
            if compiledTypeGroups.add(group.fullName~())
                errorAlreadyInGroup(attachment.type~(), attachment.group~().text~())
            compiledType.groups`(compiledTypeGroups)
        compiledData.updateType(compiledType)
    parse _, attachmentsOfOneType Array = groupedAttachments
        const compiledTypeGroups Set = compiledData.getType(attachmentsOfOneType[0].type!(Attachment).type~(), false).groups~()
        parse _, attachment Attachment = attachmentsOfOneType
            const group CGroup = compiledData.getGroup(attachment.group~(), false)
            parse _, subGroupName String = group.subGroups~()
                if !compiledTypeGroups[subGroupName]
                    errorInvalidAttachToGroup(attachment.type~(), group.fullName~(), subGroupName)
