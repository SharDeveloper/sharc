module Main

const alwaysUsedTypes Map
    var result Map = Map()
    parse typeNumber, typeName String = {
        [
            "STD::Nothing",
            "STD::Error",
            "STD::Bool",
            "STD::Int",
            "STD::String"
        ]
    }
        result.put(typeName, typeNumber.toString())
    return result

const builtinLLVMDeclaredFunctions Map
    var result Map = Map()
    const functions Array = {
        [
            "llvm.expect.i1"                    , "declare i1 @llvm.expect.i1(i1, i1)",
            "llvm.assume"                       , "declare void @llvm.assume(i1)",
            "malloc"                            , "declare noalias i8* @malloc(i64) nofree nounwind",
            "realloc"                           , "declare noalias i8* @realloc(i8* nocapture, i64) nounwind",
            "free"                              , "declare void @free(i8* nocapture) nounwind",
            "string__utf32_to_utf8"             , "declare noalias i8* @string__utf32_to_utf8({i64, i32}) nounwind",
            "string__utf8_to_utf32"             , "declare {i64, i32} @string__utf8_to_utf32(i8*) nounwind",
            "string__print"                     , "declare void @string__print({i64, i32}) nofree nounwind",
            "string__println"                   , "declare void @string__println({i64, i32}) nofree nounwind",
            "string__print_as_error"            , "declare void @string__print_as_error({i64, i32}) nofree nounwind",
            "string__println_as_error"          , "declare void @string__println_as_error({i64, i32}) nofree nounwind",
            "string__print_error"               , "declare void @string__print_error({i64, i32}) cold noreturn nounwind",
            "string__print_utf8_error"          , "declare void @string__print_utf8_error(i8*) cold noreturn nounwind",
            "error__create"                     , "declare {i64, i32} @error__create({i64, i32}, {i64, i32}, {i64, i32}) nounwind",
            "error__create_utf8_message"        , "declare {i64, i32} @error__create_utf8_message({i64, i32}, {i64, i32}, i8*) nounwind",
            "error__add_utf8_string_to_message" , "declare void @error__add_utf8_string_to_message({i64, i32}, i8*) nounwind",
            "error__get_id"                     , "declare {i64, i32} @error__get_id({i64, i32}) mustprogress nofree norecurse nosync nounwind readonly willreturn",
            "error__get_message"                , "declare {i64, i32} @error__get_message({i64, i32}) mustprogress nofree norecurse nosync nounwind readonly willreturn",
            "error__get_data"                   , "declare {i64, i32} @error__get_data({i64, i32}) mustprogress nofree norecurse nosync nounwind readonly willreturn",
            "error__free"                       , "declare void @error__free({i64, i32}, i8*) nounwind",
            "pipeline__create"                  , "declare i64 @pipeline__create() nounwind",
            "pipeline__use"                     , "declare void @pipeline__use(i64) nounwind",
            "pipeline__free"                    , "declare void @pipeline__free(i64, i8*) nounwind",
            "pipeline__to_const"                , "declare void @pipeline__to_const(i64) nounwind",
            "pipeline__push"                    , "declare void @pipeline__push(i64, {i64, i32}) nounwind",
            "pipeline__pop"                     , "declare {i64, i32} @pipeline__pop(i64) nounwind",
            "pipeline__items_count"             , "declare {i64, i32} @pipeline__items_count(i64) nounwind",
            "worker__create"                    , "declare void @worker__create({i64, i32} ({i64, i32}, {i64, i32}, i8*, i1)*, {i64, i32}, {i64, i32}) nounwind",
            "worker__yield"                     , "declare void @worker__yield() nounwind",
            "worker__sleep"                     , "declare void @worker__sleep({i64, i32}) nounwind",
            "worker__id"                        , "declare {i64, i32} @worker__id(i8* nocapture readonly) mustprogress nofree norecurse nosync readonly willreturn nounwind",
            "get_number_of_threads"             , "declare {i64, i32} @get_number_of_threads() mustprogress nofree norecurse willreturn nounwind",
            "env__get_cmd_argument"             , "declare {i64, i32} @env__get_cmd_argument({i64, i32}) nounwind",
            "env__get_cmd_arguments_count"      , "declare {i64, i32} @env__get_cmd_arguments_count() mustprogress nofree norecurse nosync readonly willreturn nounwind",
            "env__get_variable"                 , "declare {i64, i32} @env__get_variable({i64, i32}) nounwind",
            "env__get_string_from_cmd_line"     , "declare {i64, i32} @env__get_string_from_cmd_line() nounwind",
            "env__get_platform_name"            , "declare {i64, i32} @env__get_platform_name() mustprogress nofree norecurse nosync readnone willreturn nounwind",
            "env__execute_command"              , "declare {i64, i32} @env__execute_command({i64, i32}) nounwind",
            "env__get_cpu_cores_number"         , "declare {i64, i32} @env__get_cpu_cores_number() mustprogress nofree norecurse nosync readonly willreturn nounwind",
            "int__get_random"                   , "declare {i64, i32} @int__get_random(i8* nocapture) mustprogress nofree norecurse nosync willreturn nounwind",
            "int__get_cryptographic__random"    , "declare {i64, i32} @int__get_cryptographic__random(i8* nocapture) nounwind",
            "fs__delete_file"                   , "declare {i64, i32} @fs__delete_file({i64, i32}) nounwind",
            "fs__delete_empty_dir"              , "declare {i64, i32} @fs__delete_empty_dir({i64, i32}) nounwind",
            "fs__file_is_exist"                 , "declare {i64, i32} @fs__file_is_exist({i64, i32}) nounwind",
            "fs__dir_is_exist"                  , "declare {i64, i32} @fs__dir_is_exist({i64, i32}) nounwind",
            "fs__open_file"                     , "declare i1 @fs__open_file({i64, i32}, i32, i8** nocapture) nounwind",
            "fs__flush_file"                    , "declare {i64, i32} @fs__flush_file(i8* nocapture) nofree nounwind",
            "fs__close_file"                    , "declare {i64, i32} @fs__close_file(i8* nocapture) nofree nounwind",
            "fs__read_from_file"                , "declare {i64, i32} @fs__read_from_file(i8* nocapture, {i64, i32}, i8* nocapture) nofree nounwind",
            "fs__write_to_file"                 , "declare {i64, i32} @fs__write_to_file(i8* nocapture, {i64, i32}, i8* nocapture) nofree nounwind",
            "fs__get_file_size"                 , "declare {i64, i32} @fs__get_file_size({i64, i32}) nounwind",
            "fs__get_position_in_file"          , "declare {i64, i32} @fs__get_position_in_file(i8* nocapture) nofree nounwind",
            "fs__set_position_in_file"          , "declare {i64, i32} @fs__set_position_in_file(i8* nocapture, {i64, i32}) nofree nounwind",
            "fs__file_rename"                   , "declare {i64, i32} @fs__file_rename({i64, i32}, {i64, i32}) nounwind",
            "fs__dir_rename"                    , "declare {i64, i32} @fs__dir_rename({i64, i32}, {i64, i32}) nounwind",
            "fs__open_dir"                      , "declare {i64, i32} @fs__open_dir({i64, i32}) nounwind",
            "fs__read_dir"                      , "declare {i64, i32} @fs__read_dir({i64, i32}, {i64, i32}* nocapture) nounwind",
            "fs__close_dir"                     , "declare void @fs__close_dir({i64, i32}) nounwind",
            "fs__make_dir"                      , "declare {i64, i32} @fs__make_dir({i64, i32}, {i64, i32}) nounwind",
            "fs__get_tmp_dir_name"              , "declare {i64, i32} @fs__get_tmp_dir_name() mustprogress nofree norecurse nosync readnone willreturn nounwind",
            "time__current"                     , "declare i64 @time__current() nofree nounwind",
            "time__current_utc"                 , "declare i64 @time__current_utc() nofree nounwind",
            "lib__load"                         , "declare {i64, i32} @lib__load({i64, i32}) nounwind",
            "lib__get_object_address"           , "declare {i64, i32} @lib__get_object_address({i64, i32}, {i64, i32}) nounwind",
            "lib__unload_lib"                   , "declare {i64, i32} @lib__unload_lib({i64, i32}) nounwind",
            "locale__lang_code"                 , "declare {i64, i32} @locale__lang_code() nounwind",
            "shar__init"                        , "declare noalias i8* @shar__init(i32, i8**, {i64, i32} ({i64, i32}, i8*, i1)*, {i64, i32} ({i64, i32}, i8*, i1)*) nounwind",
            "shar__enable__threads"             , "declare void @shar__enable__threads() mustprogress nofree norecurse nosync willreturn writeonly nounwind",
            "shar__end"                         , "declare i1 @shar__end({i64, i32}, i8*) nounwind",
            "shar__exit"                        , "declare void @shar__exit() cold noreturn nounwind",
            "shar__fail"                        , "declare void @shar__fail() cold noreturn nounwind"
        ]
    }
    for :(index Int = 0) index < functions.length(); index += 2
        result.put(functions[index], functions[index + 1])
    return result

// Compiled data.
type CData
    currentModule String
    constants     Map // name String, Map(moduleName String, CConstant)
    types         Map // name String, Map(moduleName String, CType)
    groups        Map // name String, Map(moduleName String, CGroup)
    functions     Map // name String, Map(moduleName String, CFunction)

// The function returns a constant with the specified name.
def getConstant(compiledData CData, constantName Token, ignoreExport Bool) CConstant
    var shortConstantName String = constantName.text~()
    const separatorIndex <>Int = shortConstantName.look(':')
    if !separatorIndex.nothing?()
        shortConstantName = shortConstantName[separatorIndex + 2:]
    const allConstantsWithSameName <>Map = compiledData.constants~()[shortConstantName]
    var constant <>CConstant = nothing
    if !allConstantsWithSameName.nothing?()
        if separatorIndex.nothing?()
            parse moduleName String, constantWithSameName CConstant = allConstantsWithSameName
                if constantWithSameName.export?() || moduleName == compiledData.currentModule~()
                    if !constant.nothing?()
                        errorFewVariants(constantName, "constants", constant.fullName~().split(':')[0], moduleName)
                    constant = constantWithSameName
        else
            const moduleName String = constantName.text~()[:separatorIndex]
            constant = allConstantsWithSameName[moduleName]
            if !(moduleName == compiledData.currentModule~() || ignoreExport || constant.nothing?() || constant.export?())
                constant = nothing
    if constant.nothing?()
        errorNotFound(constantName, "constant")
    return constant

// The function returns a group with the specified name.
def getGroup(compiledData CData, groupName Token, ignoreExport Bool) CGroup
    var shortGroupName String = groupName.text~()
    const separatorIndex <>Int = shortGroupName.look(':')
    if !separatorIndex.nothing?()
        shortGroupName = shortGroupName[separatorIndex + 2:]
    const allGroupsWithSameName <>Map = compiledData.groups~()[shortGroupName]
    var group <>CGroup = nothing
    if !allGroupsWithSameName.nothing?()
        if separatorIndex.nothing?()
            parse moduleName String, groupWithSameName CGroup = allGroupsWithSameName
                if groupWithSameName.export?() || moduleName == compiledData.currentModule~()
                    if !group.nothing?()
                        errorFewVariants(groupName, "groups", group.fullName~().split(':')[0], moduleName)
                    group = groupWithSameName
        else
            const moduleName String = groupName.text~()[:separatorIndex]
            group = allGroupsWithSameName[moduleName]
            if !(moduleName == compiledData.currentModule~() || ignoreExport || group.nothing?() || group.export?())
                group = nothing
    if group.nothing?()
        errorNotFound(groupName, "group")
    return group

// The function finds out if a group with the specified name exists.
def groupExist?(compiledData CData, groupName String) Bool
    const {moduleName String, shortGroupName String} = groupName.splitByPart("::")
    const allGroupsWithSameName <>Map = compiledData.groups~()[shortGroupName]
    return !(allGroupsWithSameName.nothing?() || allGroupsWithSameName[moduleName].nothing?())

// The function returns the type with the specified name.
def getType(compiledData CData, typeName Token, ignoreExport Bool) CType
    var shortTypeName String = typeName.text~()
    const separatorIndex <>Int = shortTypeName.look(':')
    if !separatorIndex.nothing?()
        shortTypeName = shortTypeName[separatorIndex + 2:]
    const allTypesWithSameName <>Map = compiledData.types~()[shortTypeName]
    var type <>CType = nothing
    if !allTypesWithSameName.nothing?()
        if separatorIndex.nothing?()
            parse moduleName String, typeWithSameName CType = allTypesWithSameName
                if typeWithSameName.export?() || moduleName == compiledData.currentModule~()
                    if !type.nothing?()
                        errorFewVariants(typeName, "types", type.fullName~().split(':')[0], moduleName)
                    type = typeWithSameName
        else
            const moduleName String = typeName.text~()[:separatorIndex]
            type = allTypesWithSameName[moduleName]
            if !(moduleName == compiledData.currentModule~() || ignoreExport || type.nothing?() || type.export?())
                type = nothing
    if type.nothing?()
        errorNotFound(typeName, "type")
    return type

// The function updates the changed type.
def updateType(write compiledData CData, type CType)
    const {moduleName String, typeName String} = type.fullName~().splitByPart("::")
    var allTypes Map = compiledData.types`(Map())
    var allTypesWithSameName Map = allTypes.put(typeName, Map())
    allTypesWithSameName.put(moduleName, type)
    allTypes.put(typeName, allTypesWithSameName)
    compiledData.types`(allTypes)

// The function returns the function with the specified name.
def getFunction(compiledData CData, functionName Token, ignoreExport Bool) CFunction
    var shortFunctionName String = functionName.text~()
    const separatorIndex <>Int = shortFunctionName.look(':')
    if !separatorIndex.nothing?()
        shortFunctionName = shortFunctionName[separatorIndex + 2:]
    const allFunctionsWithSameName <>Map = compiledData.functions~()[shortFunctionName]
    var function <>CFunction = nothing
    if !allFunctionsWithSameName.nothing?()
        if separatorIndex.nothing?()
            parse moduleName String, functionWithSameName CFunction = allFunctionsWithSameName
                if functionWithSameName.export?() || moduleName == compiledData.currentModule~()
                    if !function.nothing?()
                        errorFewVariants(functionName, "functions", function.fullName~().split(':')[0], moduleName)
                    function = functionWithSameName
        else
            const moduleName String = functionName.text~()[:separatorIndex]
            function = allFunctionsWithSameName[moduleName]
            if !(moduleName == compiledData.currentModule~() || ignoreExport || function.nothing?() || function.export?())
                function = nothing
    if function.nothing?()
        errorNotFound(functionName, "function")
    return function

// The function updates the changed function.
def updateFunction(write compiledData CData, function CFunction)
    const {moduleName String, functionName String} = function.fullName~().splitByPart("::")
    var allFunctions Map = compiledData.functions`(Map())
    var allFunctionsWithSameName Map = allFunctions.put(functionName, Map())
    allFunctionsWithSameName.put(moduleName, function)
    allFunctions.put(functionName, allFunctionsWithSameName)
    compiledData.functions`(allFunctions)

// The function adds a function that is declared in the group and must be defined when adding any type to this group.
def addRequiredFunction(write compiledData CData, group Group, function GFunction)
    var allFunctions Map = compiledData.functions`(Map())
    var allFunctionsWithSameName <>Map = allFunctions.put(function.name~().text~(), Map())
    if allFunctionsWithSameName.nothing?()
        allFunctionsWithSameName = Map()
    var groupFunctions Map = Map()
    groupFunctions.put("-", SimpleFunction{{
        attributes            : const::defaultFAttributes.compileFAttributes(),
        signature             : function.signature~().compileFSignature(compiledData),
        ir                    : "",
        irFirstRegisterNumber : 0,
        fromCurrentModule     : true,
        docComment            : function.docComment~()
    }})
    if !allFunctionsWithSameName.put(compiledData.currentModule~(), CFunction{{
        isExport      : group.export?(),
        fullName      : compiledData.currentModule~() + "::" + function.name~().text~(),
        finalFunction : GroupsFunctions{
            groups    : [compiledData.currentModule~() + "::" + group.name~().text~()],
            functions : groupFunctions
        }
    }}).nothing?()
        errorAlreadyExist(function.name~(), "function")
    allFunctions.put(function.name~().text~(), allFunctionsWithSameName)
    compiledData.functions`(allFunctions)

// The function adds a group to existing groups.
def addCGroup(write compiledData CData, group CGroup)
    const {moduleName String, groupName String} = group.fullName~().splitByPart("::")
    var groups Map = compiledData.groups`(Map())
    var allGroupsWithSameName <>Map = groups.put(groupName, Map())
    if allGroupsWithSameName.nothing?()
        allGroupsWithSameName = Map()
    allGroupsWithSameName.put(moduleName, group)
    groups.put(groupName, allGroupsWithSameName)
    compiledData.groups`(groups)

// The function adds a type to existing types.
def addCType(write compiledData CData, type CType)
    const {moduleName String, typeName String} = type.fullName~().splitByPart("::")
    var types Map = compiledData.types`(Map())
    var allTypesWithSameName <>Map = types.put(typeName, Map())
    if allTypesWithSameName.nothing?()
        allTypesWithSameName = Map()
    allTypesWithSameName.put(moduleName, type)
    types.put(typeName, allTypesWithSameName)
    compiledData.types`(types)

// The function writes the compiled data to a file.
def createModule(compiledData CData, outputFile String)
    var fileData Bytes = const::moduleSignature
    const currentModuleName String = compiledData.currentModule~()
    currentModuleName.serialize(fileData)
    var alienTypesAddedToGroups Set = Set()
    do
        var constants Array = []
        parse _, constantsWithName Map = compiledData.constants~()
            parse moduleName String, constant CConstant = constantsWithName
                if moduleName == currentModuleName
                    constants.addItem(constant)
        constants.serializeContainer(fileData)
    do
        var types Array = []
        parse _, typesWithName Map = compiledData.types~()
            parse moduleName String, type CType = typesWithName
                if moduleName == currentModuleName
                    types.addItem(type)
                else
                    parse _, newGroup String = type.newGroups~()
                        alienTypesAddedToGroups.add(type.fullName~() + " " + newGroup)
        types.serializeContainer(fileData)
    do
        var groups Array = []
        parse _, groupsWithName Map = compiledData.groups~()
            parse moduleName String, group CGroup = groupsWithName
                if moduleName == currentModuleName
                    groups.addItem(group)
        groups.serializeContainer(fileData)
    do
        var functions Array = []
        parse functionName String, functionsWithName Map = compiledData.functions~()
            parse moduleName String, function CFunction = functionsWithName
                tSwitch function.finalFunction~()
                case GroupsFunctions
                    const groupsFunctions GroupsFunctions = function.finalFunction~()
                    parse thisType String, simpleFunction SimpleFunction = groupsFunctions.functions~()
                        if simpleFunction.fromCurrentModule?()
                            functions.addItem(ModuleFunction{{
                                isExport      : function.export?(),
                                name          : functionName,
                                module        : moduleName,
                                owningGroups  : groupsFunctions.groups~(),
                                thisType      : thisType,
                                finalFunction : simpleFunction
                            }})
                case SimpleFunction
                    const simpleFunction SimpleFunction = function.finalFunction~()
                    if simpleFunction.fromCurrentModule?()
                        functions.addItem(ModuleFunction{{
                            isExport      : function.export?(),
                            name          : functionName,
                            module        : moduleName,
                            owningGroups  : [],
                            thisType      : "",
                            finalFunction : simpleFunction
                        }})
        functions.serializeContainer(fileData)
    alienTypesAddedToGroups.serializeSet(fileData)
    if !saveToFile(outputFile, fileData)
        errorCanNotWriteToFile(outputFile)

// The function loads data from modules into compiled data.
def loadModules(modulesFilesList Array, currentModule String) CData
    var constants Map = Map()
    var types Map = Map()
    var groups Map = Map()
    var functions Map = Map()
    var alienTypesAddedToGroups Set = Set()
    var loadedModules Map = Map()
    parse _, moduleFileName String = modulesFilesList
        const module <>Bytes = loadFile(moduleFileName)
        if module.nothing?()
            errorCanNotLoadFile(moduleFileName)
        if !module.hasPrefix?(const::moduleSignature)
            errorNotModule(moduleFileName)
        var position Int = const::moduleSignature.length()
        const moduleName String = String.deserialize(module, position)
        if moduleName.empty?()
            errorNotModule(moduleFileName)
        const fileNameWithSameModule <>String = loadedModules.put(moduleName, moduleFileName)
        if !fileNameWithSameModule.nothing?()
            error2Module1Name(fileNameWithSameModule, moduleFileName, moduleName)
        try
            var length Int = Int.deserialize(module, position)
            for :(counter Int = 0) counter < length; counter++
                var constant CConstant = CConstant.deserialize(module, position)
                const constantName String = constant.fullName~()
                constant.fullName`(moduleName + "::" + constantName)
                var allConstantsWithSameName <>Map = constants.put(constantName, Map())
                if allConstantsWithSameName.nothing?()
                    allConstantsWithSameName = Map()
                allConstantsWithSameName.put(moduleName, constant)
                constants.put(constantName, allConstantsWithSameName)
            length = Int.deserialize(module, position)
            for :(counter Int = 0) counter < length; counter++
                var type CType = CType.deserialize(module, position)
                const typeName String = type.fullName~()
                type.fullName`(moduleName + "::" + typeName)
                var allTypesWithSameName <>Map = types.put(typeName, Map())
                if allTypesWithSameName.nothing?()
                    allTypesWithSameName = Map()
                allTypesWithSameName.put(moduleName, type)
                types.put(typeName, allTypesWithSameName)
            length = Int.deserialize(module, position)
            for :(counter Int = 0) counter < length; counter++
                var group CGroup = CGroup.deserialize(module, position)
                const groupName String = group.fullName~()
                group.fullName`(moduleName + "::" + groupName)
                var allGroupsWithSameName <>Map = groups.put(groupName, Map())
                if allGroupsWithSameName.nothing?()
                    allGroupsWithSameName = Map()
                allGroupsWithSameName.put(moduleName, group)
                groups.put(groupName, allGroupsWithSameName)
            length = Int.deserialize(module, position)
            for :(counter Int = 0) counter < length; counter++
                const function ModuleFunction = ModuleFunction.deserialize(module, position)
                const functionName String = function.name~()
                const functionModule String = function.module~()
                var allFunctionsWithSameName <>Map = functions.put(functionName, Map())
                if allFunctionsWithSameName.nothing?()
                    allFunctionsWithSameName = Map()
                var newFunction <>CFunction = nothing
                if function.owningGroups~().empty?()
                    newFunction = CFunction{{
                        isExport      : function.export?(),
                        fullName      : functionModule + "::" + functionName,
                        finalFunction : function.finalFunction~()
                    }}
                else
                    var groupsFunctions <>CFunction = allFunctionsWithSameName[functionModule]
                    if groupsFunctions.nothing?()
                        groupsFunctions = CFunction{{
                            isExport      : function.export?(),
                            fullName      : functionModule + "::" + functionName,
                            finalFunction : GroupsFunctions{
                                groups    : function.owningGroups~(),
                                functions : Map()
                            }
                        }}
                    addFunctionToFunctionWithGroupsFunctions(groupsFunctions, function.thisType~(), function.finalFunction~())
                    newFunction = groupsFunctions
                allFunctionsWithSameName.put(functionModule, newFunction)
                functions.put(functionName, allFunctionsWithSameName)
            alienTypesAddedToGroups = Set.deserializeSet(module, position, String)
        catch
            errorNotModule(moduleFileName)
        parse _, typeAndGroup String = alienTypesAddedToGroups
            const {fullTypeName String, groupName String} = typeAndGroup.split(' ')
            const {typeModuleName String, shortTypeName String} = fullTypeName.splitByPart("::")
            try
                var allTypesWithSameName Map = types.put(shortTypeName, Map())
                var type CType = allTypesWithSameName[typeModuleName]
                var typeGroups Set = type.groups`(Set())
                typeGroups.add(groupName)
                type.groups`(typeGroups)
                allTypesWithSameName.put(typeModuleName, type)
                types.put(shortTypeName, allTypesWithSameName)
            catch
                errorNotFoundTypeInModules(fullTypeName)
    return CData{{
        currentModule : currentModule,
        constants     : constants,
        types         : types,
        groups        : groups,
        functions     : functions
    }}

// The function creates a file with the final program.
#noinline
def createProgram(compiledData CData, outputFile String)
    var usedData <>UsedData = nothing
    do
        var groupsTypes Map = Map()
        parse _, groups Map = compiledData.groups~()
            parse _, group CGroup = groups
                groupsTypes.put(group.fullName~(), Set())
        parse typeName String, _ = const::alwaysUsedTypes
            const typeGroups Set = compiledData.getType(const::emptyToken.replaceText(typeName), true).groups~()
            parse _, group String = typeGroups
                var groupTypes Set = groupsTypes.put(group, Set())
                groupTypes.add(typeName)
                groupsTypes.put(group, groupTypes)
        usedData = UsedData{{
            constants          : Map(),
            types              : const::alwaysUsedTypes,
            inGroups           : Map(),
            functions          : Map(),
            llvmConstants      : Map(),
            llvmDeclares       : const::builtinLLVMDeclaredFunctions,
            llvmFunctions      : "",
            groupsFunctions    : Map(),
            groupsTypes        : groupsTypes,
            groupListConstants : Map()
        }}
    var mainFunctionMayThrow Bool = true
    try
        const mainFunction CFunction = compiledData.getFunction(const::emptyToken.replaceText("Main::main"), true)
        if {
            !(
                mainFunction.finalFunction~().type?(SimpleFunction) &&
                !mainFunction.finalFunction~().type!(SimpleFunction).attributes~().cold~() &&
                !mainFunction.finalFunction~().type!(SimpleFunction).attributes~().worker~() &&
                mainFunction.finalFunction~().type!(SimpleFunction).signature~().arguments~().empty?() &&
                mainFunction.finalFunction~().type!(SimpleFunction).signature~().resultType~().nothingType?()
            )
        }
            errorIncorrectMain()
        mainFunctionMayThrow = !mainFunction.finalFunction~().type!(SimpleFunction).attributes~().nothrow~()
    catch
        errorNotFoundMainFunction()
    do
        var compilingConstants Set = Set()
        var compilingFunctions Set = Set()
        compilingFunctions.add(const::emptyToken.replaceText("Main::main".addItem$((mainFunctionMayThrow || const::userCommandArguments.ignoreNoThrow~()).select('1', '0'))))
        compilingFunctions.add(const::emptyToken.replaceText("STD::shar__rc_free0"))
        compilingFunctions.add(const::emptyToken.replaceText("STD::shar__rc_use0"))
        for :(loop)
            for !compilingConstants.empty?()
                var constantName Token = const::emptyToken
                parse :(parse) _, constant Token = compilingConstants
                    constantName = constant
                    end parse
                if !constantName.empty?()
                    compilingConstants.remove(constantName)
                    compiledData.constantToFinalIR(constantName, compilingConstants, compilingFunctions, usedData)
            for !compilingFunctions.empty?()
                var functionName Token = const::emptyToken
                parse :(parse) _, function Token = compilingFunctions
                    functionName = function
                    end parse
                if !functionName.empty?()
                    compilingFunctions.remove(functionName)
                    compiledData.functionToFinalIR(functionName, compilingConstants, compilingFunctions, usedData)
            if compilingConstants.empty?()
                end loop
    var ir String = const::builtinConstants
    do
        var constantsArray Array = "".repeat(usedData.llvmConstants~().length(), Array)
        parse code String, name String = usedData.llvmConstants~()
            constantsArray.setItem(Int.fromString(name[4:]), name + " = " + code + "\n")
        parse _, line String = constantsArray
            ir += line
    do
        var typesArray Array = "".repeat(usedData.types~().length(), Array)
        parse typeName String, typeNumber String = usedData.types~()
            typesArray.setItem(Int.fromString(typeNumber), irTypeNameToConstant(typeName, typeNumber))
        parse _, line String = typesArray
            ir += line
    var fields Array = [].repeat(usedData.types~().length(), Array)
    parse typeName String, typeNumberAsString String = usedData.types~()
        const fieldsFromType Map = compiledData.getType(const::emptyToken.replaceText(typeName), true).fields~()
        var fieldsArray Array = []
        const typeNumber Int = Int.fromString(typeNumberAsString)
        if !fieldsFromType.empty?()
            parse fieldName String, _ = fieldsFromType
                fieldsArray.addItem(fieldName)
            fieldsArray.sort(true)
        fields.setItem(typeNumber, fieldsArray)
    irCreateFieldsNamesConstants(fields, ir)
    irConstantsInit(usedData.constants~(), ir)
    ir += builtinFunctions(mainFunctionMayThrow)
    parse functionNameWithVariant String, functionCode String = usedData.functions~()
        if !functionCode.empty?()
            ir += functionCode
        else
            const functionName String = functionNameWithVariant[:functionNameWithVariant.length() - 1]
            const nothrow Bool = functionNameWithVariant[functionNameWithVariant.length() - 1] == '0'
            var typesInGroups Map = Map()
            var simpleFunction <>SimpleFunction = nothing
            do
                const functions GroupsFunctions = compiledData.getFunction(const::emptyToken.replaceText(functionName), true).finalFunction~()
                simpleFunction = functions.functions~()["-"]
                if simpleFunction.nothing?()
                    simpleFunction = functions.functions~()["+"]
                parse typeName String, _ =  functions.functions~()
                    const typeNumber <>String = usedData.types~()[typeName]
                    if !((typeName.length() == 1 && (typeName[0] == '-' || typeName[0] == '+')) || typeNumber.nothing?())
                        typesInGroups.put(typeNumber, typeName)
            irCreateGenericFunction(functionName, nothrow, typesInGroups, simpleFunction.signature~().arguments~(), ir)
    ir += usedData.llvmFunctions~()
    irCreateGetFieldNameFunctions(fields, ir)
    parse groupsAsString String, functionName String = usedData.inGroups~()
        irCreateInGroupsFunctions(groupsAsString, functionName, usedData, ir)
    irCreateTypeNumberToTypeNameFunction(usedData.types~(), ir)
    parse _, declare String = usedData.llvmDeclares~()
        ir += declare + "\n"
    if !saveToUTF8File(ir, outputFile)
        errorCanNotWriteToFile(outputFile)
