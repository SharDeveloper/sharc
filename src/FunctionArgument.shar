module Main

type FArgument
    // access Int
    // name   Token
    // type   OType

attach FArgument to FieldAccess
    #alwaysinline
    def access~(argument FArgument) Int
        return argument.typeGetItem(0)

    #alwaysinline
    def access`(write argument FArgument, new Int) Int
        return argument.typePut(0, new)

attach FArgument to FieldName
    #alwaysinline
    def name~(argument FArgument) Token
        return argument.typeGetItem(1)

    #alwaysinline
    def name`(write argument FArgument, new <>Token) <>Token
        return argument.typePut(1, new)

attach FArgument to FieldType
    #alwaysinline
    def type~(argument FArgument) OType
        return argument.typeGetItem(2)

    #alwaysinline
    def type`(write argument FArgument, new <>OType) <>OType
        return argument.typePut(2, new)

#alwaysinline
def fArgument(access Int, name Token, type OType) FArgument
    return FArgument.fromList({access, name, type})
