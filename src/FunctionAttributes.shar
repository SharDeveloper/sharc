module Main

// Attributes of the function.
// "this" - creates a function that is part of the specified group, becoming the default implementation.
// "override" - overrides a function with the "this" attribute for a particular type.
type FAttributes
    // boolAttributes Int (like array of bit: alwaysinline, inline, noInline, cold, unsafewrite, nothrow, worker)
    // this           Token
    // override       Token

const defaultFAttributes FAttributes = FAttributes.fromList({0, const::emptyToken, const::emptyToken})

#alwaysinline
def alwaysInline?(attributes FAttributes) Bool
    const boolAttributes Int = attributes.typeGetItem(0)
    return boolAttributes.getBit(0)

#alwaysinline
def inline?(attributes FAttributes) Bool
    const boolAttributes Int = attributes.typeGetItem(0)
    return boolAttributes.getBit(1)

#alwaysinline
def noInline?(attributes FAttributes) Bool
    const boolAttributes Int = attributes.typeGetItem(0)
    return boolAttributes.getBit(2)

#alwaysinline
def cold?(attributes FAttributes) Bool
    const boolAttributes Int = attributes.typeGetItem(0)
    return boolAttributes.getBit(3)

#alwaysinline
def nothrow?(attributes FAttributes) Bool
    const boolAttributes Int = attributes.typeGetItem(0)
    return boolAttributes.getBit(4)

#alwaysinline
def unsafewrite?(attributes FAttributes) Bool
    const boolAttributes Int = attributes.typeGetItem(0)
    return boolAttributes.getBit(5)

#alwaysinline
def worker?(attributes FAttributes) Bool
    const boolAttributes Int = attributes.typeGetItem(0)
    return boolAttributes.getBit(6)

#alwaysinline
def this~(attributes FAttributes) Token
    return attributes.typeGetItem(1)

#alwaysinline
def override~(attributes FAttributes) Token
    return attributes.typeGetItem(2)

attach FAttributes to BinarySerializable
    #alwaysinline
    def serialize(attributes FAttributes, write bytes Bytes)
        const attributesInt Int = attributes.typeGetItem(0)
        attributesInt.serialize(bytes)

    #alwaysinline
    def deserialize(noread type FAttributes, bytes Bytes, write position Int) FAttributes
        return FAttributes.fromList({Int.deserialize(bytes, position), const::emptyToken, const::emptyToken})
