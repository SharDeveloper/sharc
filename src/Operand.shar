module Main

// The operand in expressions.
type Operand
    code          Token
    access        Access
    value         String
    type          COType
    isConstant    Bool
    isNamed       Bool
    isArgument    Bool
    isGlobalConst Bool

// A type that stores data for operands with a name. (constants and variables in functions)
type NamedOperand
    level   Int
    operand Operand
    isUsed  Bool

attach Operand to IsConstant
    def constant?(operand Operand) Bool
        return operand.isConstant~()

attach Operand to IsNamed
    def named?(operand Operand) Bool
        return operand.isNamed~()

attach Operand to IsArgument
    def argument?(operand Operand) Bool
        return operand.isArgument~()

attach Operand to IsGlobalConst
    def globalConst?(operand Operand) Bool
        return operand.isGlobalConst~()

attach NamedOperand to IsUsed
    def used?(operand NamedOperand) Bool
        return operand.isUsed~()

// The function returns the specified operand as not readable.
def toNoRead(operand Operand, write codeData CodeData, write ir String) Operand
    var result Operand = operand
    result.access`(Access[noread])
    result.value`(irOperandTypeNumber(operand, codeData, ir))
    return result

// The function returns the specified operand but is read-only.
def toReadOnly(operand Operand, write codeData CodeData, write ir String) Operand
    eSwitch operand.access~()
    case noread
        errorWrongAccess(operand.code~(), "read only", "no read")
    case read
        return operand
    case write
        var result Operand = operand
        result.access`(Access[read])
        result.value`(irLoad(const::objectIRType, result.value~(), "8", codeData, ir))
        return result

// The function applies the "shar__to_const" function to the operand.
def operandToConst(operand Operand, write codeData CodeData, compiledData CData, write ir String)
    var needToTransform Bool = !(operand.Main::constant?() || operand.access~() == Access[noread] || operand.type~().nothingType?() || operand.globalConst?())
    if needToTransform && operand.type~().simple?() && !operand.type~().this?()
        needToTransform = !compiledData.getType(const::emptyToken.replaceText(operand.type~().type~()), true).groups~()["STD::Independent"]
    var endLabel String = ""
    if needToTransform
        var roOperand Operand = operand.toReadOnly(codeData, ir)
        if roOperand.type~().simple?() && roOperand.type~().optional?()
            const functionLabel String = codeData.createLabel()
            endLabel = codeData.createLabel()
            const typeRegister String = irOperandTypeNumber(roOperand, codeData, ir)
            irIf(irEq(const::irTypeOfType, typeRegister, const::nothingTypeNumber, codeData, ir), Expectation[unknown], endLabel, functionLabel, codeData, ir)
            irLabel(functionLabel, ir)
            var type COType = roOperand.type`(const::dummyCOType)
            type.isOptional`(false)
            roOperand.type`(type)
        callFunction(const::emptyToken.replaceText("STD::shar__to_const"), [roOperand], codeData, compiledData, [], false, true, ir)
    if !endLabel.empty?()
        irJmp(endLabel, ir)
        irLabel(endLabel, ir)

// The function applies the "shar__rc_free" function to the operand.
def freeOperand(operand Operand, write codeData CodeData, compiledData CData, write ir String)
    var needToFree Bool = !(operand.Main::constant?() || operand.access~() == Access[noread] || operand.type~().nothingType?() || operand.globalConst?())
    if needToFree && operand.type~().simple?() && !operand.type~().this?()
        needToFree = !compiledData.getType(const::emptyToken.replaceText(operand.type~().type~()), true).groups~()["STD::Independent"]
    var endLabel String = ""
    if needToFree
        var roOperand Operand = operand.toReadOnly(codeData, ir)
        if roOperand.type~().simple?() && roOperand.type~().optional?()
            const functionLabel String = codeData.createLabel()
            endLabel = codeData.createLabel()
            const typeRegister String = irOperandTypeNumber(roOperand, codeData, ir)
            irIf(irEq(const::irTypeOfType, typeRegister, const::nothingTypeNumber, codeData, ir), Expectation[unknown], endLabel, functionLabel, codeData, ir)
            irLabel(functionLabel, ir)
            var type COType = roOperand.type`(const::dummyCOType)
            type.isOptional`(false)
            roOperand.type`(type)
        callFunction(const::emptyToken.replaceText("STD::shar__rc_free"), [roOperand], codeData, compiledData, [], false, true, ir)
    if !endLabel.empty?()
        irJmp(endLabel, ir)
        irLabel(endLabel, ir)

// The function applies the "shar__rc_use" function to the operand.
def useOperand(operand Operand, write codeData CodeData, compiledData CData, write ir String)
    var needToUse Bool = !(operand.Main::constant?() || operand.access~() == Access[noread] || operand.type~().nothingType?() || operand.globalConst?())
    if needToUse && operand.type~().simple?() && !operand.type~().this?()
        needToUse = !compiledData.getType(const::emptyToken.replaceText(operand.type~().type~()), true).groups~()["STD::Independent"]
    var endLabel String = ""
    if needToUse
        var roOperand Operand = operand.toReadOnly(codeData, ir)
        if roOperand.type~().simple?() && roOperand.type~().optional?()
            const functionLabel String = codeData.createLabel()
            endLabel = codeData.createLabel()
            const typeRegister String = irOperandTypeNumber(roOperand, codeData, ir)
            irIf(irEq(const::irTypeOfType, typeRegister, const::nothingTypeNumber, codeData, ir), Expectation[unknown], endLabel, functionLabel, codeData, ir)
            irLabel(functionLabel, ir)
            var type COType = roOperand.type`(const::dummyCOType)
            type.isOptional`(false)
            roOperand.type`(type)
        callFunction(const::emptyToken.replaceText("STD::shar__rc_use"), [roOperand], codeData, compiledData, [], false, true, ir)
    if !endLabel.empty?()
        irJmp(endLabel, ir)
        irLabel(endLabel, ir)

// The function checks that the type of the operand is compatible with the specified one.
def typesCompatibleCheck(operand Operand, expectedType COType, codeData CodeData, compiledData CData)
    const operandType COType = operand.type~()
    if expectedType.anyType?() || operandType.anyType?()
        return
    var isError Bool = false
    var compileTimeEqTypes Bool = false
    var compileTimeOperandIsNothing Bool = false
    var compileTimeOperandInGroups Bool = false
    var compileTimeOperandGroupsHaveExpectedGroups_exit Bool = false
    var compileTimeOperandGroupsHaveExpectedGroups_runTimeOperandIsNotNothing_exit Bool = false
    var compileTimeExpectedInGroups Bool = false
    var compileTimeThisInOperandGroups Bool = false
    var compileTimeThisInExpectedGroups Bool = false
    var tableIndex Int = 0
    if operandType.this?()
        tableIndex = 24
    elif !operandType.simple?()
        tableIndex = 12
    if operandType.optional?()
        tableIndex += 6
    if expectedType.this?()
        tableIndex += 4
    elif !expectedType.simple?()
        tableIndex += 2
    if expectedType.optional?()
        tableIndex++
    switch tableIndex
    case 0, 6, 7
        compileTimeEqTypes = true
    case 1
        compileTimeEqTypes = true
        compileTimeOperandIsNothing = true
    case 2, 8, 9
        compileTimeOperandInGroups = true
    case 3
        compileTimeOperandInGroups = true
        compileTimeOperandIsNothing = true
    case 4, 10, 11, 24, 25, 30, 31
        isError = true
    case 5
        compileTimeOperandIsNothing = true
    case 12, 13, 18, 19
        compileTimeExpectedInGroups = true
    case 14, 15, 21
        compileTimeOperandGroupsHaveExpectedGroups_exit = true
    case 16, 17, 22, 23
        compileTimeThisInOperandGroups = true
    case 20
        compileTimeOperandGroupsHaveExpectedGroups_runTimeOperandIsNotNothing_exit = true
    case 26, 27, 32, 33
        compileTimeThisInExpectedGroups = true
    if !isError
        var allOk Bool = false
        var haveCompileTimeOperations Bool = false
        if compileTimeOperandIsNothing
            haveCompileTimeOperations = true
            allOk = operandType.nothingType?()
        if !allOk && compileTimeEqTypes
            haveCompileTimeOperations = true
            allOk = operandType.typeEq?(expectedType, false)
        if !allOk && (compileTimeOperandGroupsHaveExpectedGroups_exit || compileTimeOperandGroupsHaveExpectedGroups_runTimeOperandIsNotNothing_exit)
            haveCompileTimeOperations = true
            allOk = true
        if !allOk && (compileTimeOperandInGroups || compileTimeExpectedInGroups)
            haveCompileTimeOperations = true
            const simpleType String = compileTimeOperandInGroups.select(operandType, expectedType).type~()
            const groupType Array = compileTimeOperandInGroups.select(expectedType, operandType).type~()
            const groupsOfSimpleType Set = compiledData.getType(const::emptyToken.replaceText(simpleType), true).groups~()
            parse :(parse) _, group String = groupType
                allOk = groupsOfSimpleType[group]
                if !allOk
                    end parse
        if !allOk && (compileTimeThisInOperandGroups || compileTimeThisInExpectedGroups)
            haveCompileTimeOperations = true
            const groupType Array = compileTimeThisInOperandGroups.select(operandType, expectedType).type~()
            const allThisGroups Set = codeData.allThisGroups~()
            parse :(parse) _, group String = groupType
                allOk = allThisGroups[group]
                if !allOk
                    end parse
        isError = haveCompileTimeOperations && !allOk
    if isError
        errorInvalidType(operand.code~(), coTypeToString(operandType, true), coTypeToString(expectedType, true))

// The function, if necessary, generates IR code that checks that the type is compatible with the specified one.
def runtimeTypesCompatibleCheck(operand Operand, expectedType COType, write codeData CodeData, compiledData CData, freedOnError Array, write ir String)
    if expectedType.anyType?()
        return
    const operandType COType = operand.type~()
    var isError Bool = false
    var compileTimeEqTypes Bool = false
    var compileTimeOperandIsNothing Bool = false
    var compileTimeOperandInGroups Bool = false
    var compileTimeOperandGroupsHaveExpectedGroups_exit Bool = false
    var compileTimeOperandGroupsHaveExpectedGroups_runTimeOperandIsNotNothing_exit Bool = false
    var compileTimeExpectedInGroups Bool = false
    var compileTimeThisInOperandGroups Bool = false
    var compileTimeThisInExpectedGroups Bool = false
    var runTimeEqTypes Bool = false
    var runTimeOperandIsNothing Bool = false
    var runTimeOperandIsNotNothing Bool = false
    var runTimeOperandInGroups Bool = false
    var tableIndex Int = 0
    if operandType.anyType?()
        tableIndex = 36
    elif operandType.this?()
        tableIndex = 24
    elif !operandType.simple?()
        tableIndex = 12
    if operandType.optional?()
        tableIndex += 6
    if expectedType.this?()
        tableIndex += 4
    elif !expectedType.simple?()
        tableIndex += 2
    if expectedType.optional?()
        tableIndex++
    switch tableIndex
    case 0, 7
        compileTimeEqTypes = true
    case 1
        compileTimeEqTypes = true
        compileTimeOperandIsNothing = true
    case 2, 9
        compileTimeOperandInGroups = true
    case 3
        compileTimeOperandInGroups = true
        compileTimeOperandIsNothing = true
    case 4, 10, 11, 24, 25, 30, 31
        isError = true
    case 5
        compileTimeOperandIsNothing = true
    case 6
        compileTimeEqTypes = true
        runTimeOperandIsNotNothing = true
    case 8
        compileTimeOperandInGroups = true
        runTimeOperandIsNotNothing = true
    case 12, 13, 18
        compileTimeExpectedInGroups = true
        runTimeEqTypes = true
    case 14, 15
        compileTimeOperandGroupsHaveExpectedGroups_exit = true
        runTimeOperandInGroups = true
    case 16, 17, 22
        compileTimeThisInOperandGroups = true
        runTimeEqTypes = true
    case 19
        compileTimeExpectedInGroups = true
        runTimeEqTypes = true
        runTimeOperandIsNothing = true
    case 20
        compileTimeOperandGroupsHaveExpectedGroups_runTimeOperandIsNotNothing_exit = true
    case 21
        compileTimeOperandGroupsHaveExpectedGroups_exit = true
        runTimeOperandIsNothing = true
        runTimeOperandInGroups = true
    case 23
        compileTimeThisInOperandGroups = true
        runTimeEqTypes = true
        runTimeOperandIsNothing = true
    case 26, 27, 33
        compileTimeThisInExpectedGroups = true
    case 32
        compileTimeThisInExpectedGroups = true
        runTimeOperandIsNotNothing = true
    case 34
        runTimeOperandIsNotNothing = true
    case 36, 40
        runTimeEqTypes = true
    case 37, 41
        runTimeEqTypes = true
        runTimeOperandIsNothing = true
    case 38
        runTimeOperandInGroups = true
    case 39
        runTimeOperandInGroups = true
        runTimeOperandIsNothing = true
    if !isError
        var allOk Bool = false
        var haveCompileTimeOperations Bool = false
        if compileTimeOperandIsNothing
            haveCompileTimeOperations = true
            allOk = operandType.nothingType?()
        if !allOk && compileTimeEqTypes
            haveCompileTimeOperations = true
            allOk = operandType.typeEq?(expectedType, false)
        if !allOk && (compileTimeOperandGroupsHaveExpectedGroups_exit || compileTimeOperandGroupsHaveExpectedGroups_runTimeOperandIsNotNothing_exit)
            haveCompileTimeOperations = true
            const operandTypeGroups Array = operandType.type~()
            const expectedTypeGroups Array = expectedType.type~()
            parse :(expectedParse) _, expectedTypeGroup String = expectedTypeGroups
                allOk = !operandTypeGroups.binarySearchString(expectedTypeGroup).nothing?()
                if !allOk
                    end expectedParse
            if allOk
                if compileTimeOperandGroupsHaveExpectedGroups_exit
                    runTimeOperandIsNothing = false
                    runTimeOperandIsNotNothing = false
                    runTimeOperandInGroups = false
                else
                    runTimeOperandIsNotNothing = true
            else
                if compileTimeOperandGroupsHaveExpectedGroups_runTimeOperandIsNotNothing_exit
                    runTimeOperandInGroups = true
                allOk = true
        if !allOk && (compileTimeOperandInGroups || compileTimeExpectedInGroups)
            haveCompileTimeOperations = true
            const simpleType String = compileTimeOperandInGroups.select(operandType, expectedType).type~()
            const groupType Array = compileTimeOperandInGroups.select(expectedType, operandType).type~()
            const groupsOfSimpleType Set = compiledData.getType(const::emptyToken.replaceText(simpleType), true).groups~()
            parse :(parse) _, group String = groupType
                allOk = groupsOfSimpleType[group]
                if !allOk
                    end parse
        if !allOk && (compileTimeThisInOperandGroups || compileTimeThisInExpectedGroups)
            haveCompileTimeOperations = true
            const groupType Array = compileTimeThisInOperandGroups.select(operandType, expectedType).type~()
            const allThisGroups Set = codeData.allThisGroups~()
            parse :(parse) _, group String = groupType
                allOk = allThisGroups[group]
                if !allOk
                    end parse
        isError = haveCompileTimeOperations && !allOk
    if isError
        errorInvalidType(operand.code~(), coTypeToString(operandType, true), coTypeToString(expectedType, true))
    var typeIsCorrect String = ""
    if runTimeEqTypes || runTimeOperandIsNothing || runTimeOperandIsNotNothing || runTimeOperandInGroups
        const throwLabel String = codeData.createLabel()
        const endLabel String = codeData.createLabel()
        irCheckBegin(ir, false)
        const operandIRType String = irOperandTypeNumber(operand, codeData, ir)
        if runTimeEqTypes
            const irExpectedType String = expectedType.this?().select(codeData.thisTypeRegister~(), sharTypeToIRType(expectedType.type~()))
            typeIsCorrect = irEq(const::irTypeOfType, operandIRType, irExpectedType, codeData, ir)
        if runTimeOperandIsNothing || runTimeOperandIsNotNothing
            const predicatePart String = runTimeOperandIsNothing.select({
                irEq(const::irTypeOfType, operandIRType, const::nothingTypeNumber, codeData, ir),
                irNotEq(const::irTypeOfType, operandIRType, const::nothingTypeNumber, codeData, ir)
            })
            if typeIsCorrect.empty?()
                typeIsCorrect = predicatePart
            else
                typeIsCorrect = irOr(typeIsCorrect, predicatePart, codeData, ir)
        if runTimeOperandInGroups
            const predicatePart String = irInGroups(operandIRType, expectedType.type~(), codeData, ir)
            if typeIsCorrect.empty?()
                typeIsCorrect = predicatePart
            else
                typeIsCorrect = irOr(typeIsCorrect, predicatePart, codeData, ir)
        irIf(typeIsCorrect, Expectation[true], endLabel, throwLabel, codeData, ir)
        irLabel(throwLabel, ir)
        createInvalidTypeThrow(codeData, compiledData, freedOnError, ir)
        irLabel(endLabel, ir)
        irCheckEnd(ir, false)

// The function is used to generate the IR code that is needed to check that all items in an array (STD::Array) are of the same type.
def runtimeArrayItemTypeCheck(operand Operand, expectedType COType, expectedTypeNumber String, write codeData CodeData, compiledData CData, freedOnError Array, write ir String)
    const operandType COType = operand.type~()
    var isError Bool = false
    var compileTimeEqTypes Bool = false
    var compileTimeOperandInGroups Bool = false
    var compileTimeExpectedInGroups Bool = false
    var compileTimeThisInOperandGroups Bool = false
    var compileTimeThisInExpectedGroups Bool = false
    var runTimeEqTypes Bool = operandType.anyType?() || expectedType.anyType?()
    if !runTimeEqTypes
        var tableIndex Int = 0
        if operandType.this?()
            tableIndex = 24
        elif !operandType.simple?()
            tableIndex = 12
        if operandType.optional?()
            tableIndex += 6
        if expectedType.this?()
            tableIndex += 4
        elif !expectedType.simple?()
            tableIndex += 2
        if expectedType.optional?()
            tableIndex++
        runTimeEqTypes = true
        switch tableIndex
        case 0
            runTimeEqTypes = false
            compileTimeEqTypes = true
        case 1, 6, 7
            compileTimeEqTypes = true
        case 2, 3, 8, 9
            compileTimeOperandInGroups = true
        case 4, 5, 10, 11, 24, 25, 30, 31
            isError = true
        case 12, 13, 18
            compileTimeExpectedInGroups = true
        case 16, 17, 22, 23
            compileTimeThisInOperandGroups = true
        case 26, 27, 32, 33
            compileTimeThisInExpectedGroups = true
        case 28
            runTimeEqTypes = false
    if !isError
        var allOk Bool = false
        var haveCompileTimeOperations Bool = false
        if compileTimeEqTypes
            haveCompileTimeOperations = true
            allOk = operandType.typeEq?(expectedType, false)
        if !allOk && (compileTimeOperandInGroups || compileTimeExpectedInGroups)
            haveCompileTimeOperations = true
            const simpleType String = compileTimeOperandInGroups.select(operandType, expectedType).type~()
            const groupType Array = compileTimeOperandInGroups.select(expectedType, operandType).type~()
            const groupsOfSimpleType Set = compiledData.getType(const::emptyToken.replaceText(simpleType), false).groups~()
            parse :(parse) _, group String = groupType
                allOk = groupsOfSimpleType[group]
                if !allOk
                    end parse
        if !allOk && (compileTimeThisInOperandGroups || compileTimeThisInExpectedGroups)
            haveCompileTimeOperations = true
            const groupType Array = compileTimeThisInOperandGroups.select(operandType, expectedType).type~()
            const allThisGroups Set = codeData.allThisGroups~()
            parse :(parse) _, group String = groupType
                allOk = allThisGroups[group]
                if !allOk
                    end parse
        isError = haveCompileTimeOperations && !allOk
    if isError
        errorInvalidType(operand.code~(), coTypeToString(operandType, true), coTypeToString(expectedType, true))
    if runTimeEqTypes
        const throwLabel String = codeData.createLabel()
        const endLabel String = codeData.createLabel()
        irCheckBegin(ir, false)
        const operandIRType String = irOperandTypeNumber(operand, codeData, ir)
        irIf(irEq(const::irTypeOfType, operandIRType, expectedTypeNumber, codeData, ir), Expectation[true], endLabel, throwLabel, codeData, ir)
        irLabel(throwLabel, ir)
        createInvalidTypeThrow(codeData, compiledData, freedOnError, ir)
        irLabel(endLabel, ir)
        irCheckEnd(ir, false)

// The function finds out whether the type of the operand is "STD::Error", if it is, takes appropriate measures.
def checkOperandForError(operand Operand, write codeData CodeData, compiledData CData, freedOnError Array, onlyINTCheck Bool, write ir String)
    const errorLabel String = codeData.createLabel()
    const okLabel String = codeData.createLabel()
    irCheckBegin(ir, onlyINTCheck)
    irIf(irEq(const::irTypeOfType, irOperandTypeNumber(operand, codeData, ir), const::errorTypeNumber, codeData, ir), Expectation[false], errorLabel, okLabel, codeData, ir)
    irLabel(errorLabel, ir)
    parse _, freedOperand Operand = freedOnError
        freedOperand.freeOperand(codeData, compiledData, ir)
    if codeData.catchLabels~().empty?()
        freeLevel(codeData, 1, compiledData, ir)
        irReturn(irAddMessageToError(operand.value~(), "\n<- " + codeData.functionNameForErrorMessage~(), codeData, ir), ir)
    else
        const catchLabels Array = codeData.catchLabels~()
        const catchLabel Label = catchLabels[catchLabels.length() - 1]
        freeLevel(codeData, catchLabel.level~(), compiledData, ir)
        irStore(const::objectIRType, operand.value~(), codeData.getErrorVariableRegister(), "8", ir)
        irJmp(catchLabel.label~(), ir)
    irLabel(okLabel, ir)
    irCheckEnd(ir, onlyINTCheck)
