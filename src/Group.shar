module Main

type Group
    isExport   Bool
    name       Token
    subGroups  Array // [Token]
    functions  Map   // Map(name String, function GFunction)
    docComment String

// The function needed to be implemented when a type joins a group.
type GFunction
    name       Token
    signature  FSignature
    docComment String

// Compiled group.
type CGroup
    isExport   Bool
    fullName   String
    subGroups  Set // Set(String)
    functions  Set // Set(String)
    docComment String

attach Group to IsExport
    def export?(group Group) Bool
        return group.isExport~()

attach CGroup to IsExport
    def export?(group CGroup) Bool
        return group.isExport~()

def compileGroup(group Group, write compiledData CData, write compilingGroups Map)
    var inProcess Set = Set()
    compileGroup_helpFunction(group, compiledData, compilingGroups, inProcess, group.name~().replaceText(compiledData.currentModule~() + "::" + group.name~().text~()))

def compileGroup_helpFunction(group Group, write compiledData CData, write compilingGroups Map, write inProcess Set, mainGroupName Token)
    const groupName String = group.name~().text~()
    const fullName String = compiledData.currentModule~() + "::" + groupName
    if compiledData.groupExist?(fullName)
        return
    if inProcess.add(groupName)
        errorRecursiveGroup(mainGroupName, fullName)
    var compiledGroupFunctions Set = Set()
    parse functionName String, _ = group.functions~()
        compiledGroupFunctions.add(functionName)
    var compiledGroup CGroup = CGroup{{
        isExport  : group.export?(),
        fullName  : fullName,
        subGroups : Set(),
        functions : compiledGroupFunctions,
        docComment : group.docComment~()
    }}
    var firstLevelSubGroups Set = Set()
    parse _, subGroupName Token = group.subGroups~()
        const subGroup <>Group = compilingGroups[subGroupName.text~()]
        if !subGroup.nothing?()
            compileGroup_helpFunction(subGroup, compiledData, compilingGroups, inProcess, mainGroupName)
        const compiledSubGroup CGroup = compiledData.getGroup(subGroupName, false)
        if group.export?() && !compiledSubGroup.export?()
            errorExportGroupRequireNotExportGroup(group.name~(), compiledSubGroup.fullName~())
        if firstLevelSubGroups.add(compiledSubGroup.fullName~())
            errorAlreadyExist(subGroupName, "sub-group")
        importDataFromGroup(compiledGroup, compiledSubGroup)
    var allSubGroups Set = compiledGroup.subGroups`(Set())
    allSubGroups.add("STD::Any")
    compiledGroup.subGroups`(allSubGroups)
    compilingGroups.put(groupName, nothing)
    inProcess.remove(groupName)
    compiledData.addCGroup(compiledGroup)

// The function imports data from one group to another.
def importDataFromGroup(write destination, source CGroup)
    var allSubGroups Set = destination.subGroups`(Set())
    allSubGroups.add(source.fullName~())
    parse _, subGroup String = source.subGroups~()
        allSubGroups.add(subGroup)
    destination.subGroups`(allSubGroups)

attach CGroup to BinarySerializable
    def serialize(group CGroup, write bytes Bytes)
        group.export?().serialize(bytes)
        group.fullName~()[group.fullName~().look(':') + 2:].serialize(bytes)
        group.subGroups~().serializeSet(bytes)
        group.functions~().serializeSet(bytes)
        group.docComment~().serialize(bytes)

    def deserialize(noread type CGroup, bytes Bytes, write position Int) CGroup
        var currentPosition Int = position
        const result CGroup = CGroup{{
            isExport   : Bool.deserialize(bytes, currentPosition),
            fullName   : String.deserialize(bytes, currentPosition),
            subGroups  : Set.deserializeSet(bytes, currentPosition, String),
            functions  : Set.deserializeSet(bytes, currentPosition, String),
            docComment : ""
        }}
        String.deserialize(bytes, currentPosition)
        position = currentPosition
        return result
