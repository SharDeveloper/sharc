module Main

// A type for storing the signature of functions.
type FSignature
    coordinates Token
    arguments   Array // [FSArgument]
    resultType  OType

type FSArgument
    access Access
    type   OType

// Compiled function signature.
type CFSignature
    arguments   Array // [CFSArgument]
    resultType  COType

type CFSArgument
    access Access
    type   COType

def fsHaveThis!(signature FSignature)
    parse _, argument FSArgument = signature.arguments~()
        const argumentType OType = argument.type~()
        if argumentType.this?() && !argumentType.optional?()
            return
    errorNoThis(signatureToToken(signature))

def cfsHaveThis!(signature CFSignature, coordinates Token)
    parse _, argument CFSArgument = signature.arguments~()
        const argumentType COType = argument.type~()
        if argumentType.this?() && !argumentType.optional?()
            return
    errorNoThis(coordinates.replaceText(signatureToString(signature)))

// The function turns the function signature into a token.
def signatureToToken(signature FSignature) Token
    var result Token = signature.coordinates~().replaceText("(")
    const arguments Array = signature.arguments~()
    const resultType OType = signature.resultType~()
    const lastIndex Int = arguments.length() - 1
    parse index, argument FArgument = arguments
        const access Access = argument.access~()
        if access != Access[read]
            result.addString(access.toString() + " ")
        result.addString(oTypeToToken(argument.type~(), true).text~() + (index == lastIndex).select(") ", ", "))
    result.addString(oTypeToToken(resultType, true).text~())
    return result

// The function turns the function signature into a string.
def signatureToString(signature CFSignature) String
    var result String = "("
    const arguments Array = signature.arguments~()
    const resultType COType = signature.resultType~()
    const lastIndex Int = arguments.length() - 1
    parse index, argument CFSArgument = arguments
        const access Access = argument.access~()
        if access != Access[read]
            result += access.toString() + " "
        result += coTypeToString(argument.type~(), true) + (index == lastIndex).select(") ", ", ")
    result += coTypeToString(resultType, true)
    return result

def compileFSignature(signature FSignature, compiledData CData) CFSignature
    var newArguments Array = []
    parse _, oldArgument FSArgument = signature.arguments~()
        newArguments.addItem(CFSArgument{access : oldArgument.access~(), type : oldArgument.type~().compileOType(compiledData)})
    return CFSignature{{
        arguments   : newArguments,
        resultType  : signature.resultType~().compileOType(compiledData)
    }}

// The function replaces the "This" type with a specific type.
def replaceThisType(signature CFSignature, thisType String) CFSignature
    var newArguments Array = []
    parse _, oldArgument CFSArgument = signature.arguments~()
        newArguments.addItem(oldArgument.type~().this?().select({
            CFSArgument{
                access : oldArgument.access~(),
                type   : COType{
                    type       : thisType,
                    isOptional : oldArgument.type~().optional?()
                }
            },
            oldArgument
        }))
    const oldResultType COType = signature.resultType~()
    const newResultType COType = oldResultType.this?().select({
        COType{
            type       : thisType,
            isOptional : oldResultType.optional?()
        },
        oldResultType
    })
    return CFSignature{{
        arguments   : newArguments,
        resultType  : newResultType
    }}

// The function finds out if the signatures are compatible.
def signatureCompatible?(compatibleSignature, originalSignature CFSignature, compiledData CData) Bool
    if compatibleSignature.arguments~().length() != originalSignature.arguments~().length()
        return false
    parse index, compatibleArgument CFSArgument = compatibleSignature.arguments~()
        const originalArgument CFSArgument = originalSignature.arguments~()[index]
        if !compatibleArgument.argumentCompatible?(originalArgument, compiledData)
            return false
    return CFSArgument{access : Access[read], type : compatibleSignature.resultType~()}.argumentCompatible?(CFSArgument{access : Access[read], type : originalSignature.resultType~()}, compiledData)

// The function finds out if the arguments are compatible.
def argumentCompatible?(compatibleArgument, originalArgument CFSArgument, compiledData CData) Bool
    if compatibleArgument.access~() != originalArgument.access~() || {
        (compatibleArgument.type~().optional?() != originalArgument.type~().optional?() && !originalArgument.type~().anyType?())
    }
        return false
    var result Bool = true
    if originalArgument.type~().simple?()
        result = originalArgument.type~().typeEq?(compatibleArgument.type~(), false)
    elif compatibleArgument.type~().simple?()
        const typeGroups Set = compiledData.getType(const::emptyToken.replaceText(compatibleArgument.type~().type~()), false).groups~()
        const originalTypeGroups Array = originalArgument.type~().type~()
        parse :(originalGroupsParse) _, originalTypeGroup String = originalTypeGroups
            result = typeGroups[originalTypeGroup]
            if !result
                end originalGroupsParse
    else
        const originalTypeGroups Array = originalArgument.type~().type~()
        const compatibleTypeGroups Array = compatibleArgument.type~().type~()
        parse :(parse) _, originalTypeGroup String  = originalTypeGroups
            if compatibleTypeGroups.binarySearchString(originalTypeGroup).nothing?()
                result = false
                end parse
    return result

// The function makes sure that the signatures of the functions are compatible.
def signatureCompatible!(compatibleSignature, originalSignature CFSignature, compiledData CData, functionName Token)
    if !signatureCompatible?(compatibleSignature, originalSignature, compiledData)
        errorFunctionsNotCompatible(functionName, signatureToString(compatibleSignature), signatureToString(originalSignature))

// The function gets what type in the function is considered as "This".
def getThisType(realFunctionSignature, functionSignatureWithThis CFSignature, coordinates Token) String
    if realFunctionSignature.arguments~().length() != functionSignatureWithThis.arguments~().length()
        errorInvalidType(coordinates, signatureToString(realFunctionSignature), signatureToString(functionSignatureWithThis))
    parse index, argument CFSArgument = functionSignatureWithThis.arguments~()
        if argument.type~().this?() && !argument.type~().optional?()
            const realArgumentType COType = realFunctionSignature.arguments~()[index].type!(CFSArgument).type~()
            if !realArgumentType.simple?()
                errorThisNotSimple(coordinates.replaceText(coTypeToString(realArgumentType, false)))
            return realArgumentType.type~()

attach CFSignature to BinarySerializable
    def serialize(signature CFSignature, write bytes Bytes)
        signature.arguments~().serializeContainer(bytes)
        signature.resultType~().serialize(bytes)

    def deserialize(noread type CFSignature, bytes Bytes, write position Int) CFSignature
        var currentPosition Int = position
        const result CFSignature = CFSignature{{
            arguments  : Array.deserializeContainer(bytes, currentPosition, CFSArgument),
            resultType : COType.deserialize(bytes, currentPosition)
        }}
        position = currentPosition
        return result

attach CFSArgument to BinarySerializable
    def serialize(argument CFSArgument, write bytes Bytes)
        argument.access~().serialize(bytes)
        argument.type~().serialize(bytes)

    def deserialize(noread type CFSArgument, bytes Bytes, write position Int) CFSArgument
        var currentPosition Int = position
        const result CFSArgument = CFSArgument{{
            access : Access.deserialize(bytes, currentPosition),
            type   : COType.deserialize(bytes, currentPosition)
        }}
        position = currentPosition
        return result
