module Main

// The token along with the coordinates of the place where it is located in the source code.
type Token
    text        String
    fileName    String
    lineIndex   Int
    columnIndex Int

const emptyToken Token = Token{text : "", fileName : "", lineIndex : 0, columnIndex : 0}

attach Token to Equal

attach Token to Shar__sugar__equal
    def shar__sugar__equal(token1, token2 Token) Bool
        return token1.text~() == token2.text~()

attach Token to Shar__sugar__notEqual
    def shar__sugar__notEqual(token1, token2 Token) Bool
        return !(token1 == token2)

attach Token to Ordered
    def compare(token1, token2 Token) CompareResult
        return token1.text~().compare(token2.text~())

attach Token to Shar__sugar__less
    def shar__sugar__less(token1, token2 Token) Bool
        return token1.text~() < token2.text~()

attach Token to Shar__sugar__great
    def shar__sugar__great(token1, token2 Token) Bool
        return token1.text~() > token2.text~()

attach Token to Shar__sugar__lessOrEqual
    def shar__sugar__lessOrEqual(token1, token2 Token) Bool
        return token1.text~() <= token2.text~()

attach Token to Shar__sugar__greatOrEqual
    def shar__sugar__greatOrEqual(token1, token2 Token) Bool
        return token1.text~() >= token2.text~()

attach Token to Shar__sugar__getItem
    def shar__sugar__getItem(token Token, index $Any) $Any
        return token.text~()[index]

attach Token to Long
    def length(token Token) Int
        return token.text~().length()

attach Token to Hashable
    def getHash(token Token) Int
        return token.text~().getHash()

    def getRandomizedHash(token Token) Int
        return token.text~().getRandomizedHash()

def addString(write token Token, string String)
    var text String = token.text`("")
    text += string
    token.text`(text)

def addChar(write token Token, char Char)
    var text String = token.text`("")
    text.addItem(char)
    token.text`(text)

def replaceText(token Token, newText String) Token
    var result Token = token
    result.text`(newText)
    return result

def addToColumnIndex(write token Token, addValue Int)
    token.columnIndex`(token.columnIndex~() + addValue)

def coordinatesToString(token Token) String
    return "File: " + token.fileName~() + ", line: " + (token.lineIndex~() + 1).toString() + ", column: " + (token.columnIndex~() + 1).toString() + ". "

// The function returns a unique identifier for the token.
def getUniqID(token Token) String
    return token.fileName~() + "." + token.lineIndex~().toString() + "." + token.columnIndex~().toString()
