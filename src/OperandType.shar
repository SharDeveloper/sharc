module Main

const anyType      COType = COType{type : ["STD::Any"], isOptional: false}
const arrayType    COType = COType{type : "STD::Array", isOptional: false}
const boolType     COType = COType{type : "STD::Bool", isOptional: false}
const charType     COType = COType{type : "STD::Char", isOptional: false}
const intType      COType = COType{type : "STD::Int", isOptional: false}
const iterableType COType = COType{type : ["STD::Any", "STD::Iterable"], isOptional : false}
const listType     COType = COType{type : "STD::List", isOptional: false}
const nothingType  COType = COType{type : "STD::Nothing", isOptional: false}
const realType     COType = COType{type : "STD::Real", isOptional: false}
const stringType   COType = COType{type : "STD::String", isOptional: false}
const thisType     COType = COType{type : "This", isOptional: false}

group OType: IsOptional
    simple?(This) Bool
    this?(This) Bool

// The type specified when declaring any objects.
type OType
    type       $Any // simpleType Token | groupType [Token]
    isOptional Bool

// Compiled operand type
type COType
    type       $Any // simpleType String | groupType [String]
    isOptional Bool

const dummyCOType COType = COType{type : "", isOptional : false}

attach OType to IsOptional
    def optional?(type OType) Bool
        return type.isOptional~()

attach OType to OType
    def simple?(type OType) Bool
        return type.type~().type?(Token)

    def this?(type OType) Bool
        return type.type~().type?(Token) && type.type~().type!(Token).text~() == "This"

attach COType to IsOptional
    def optional?(type COType) Bool
        return type.isOptional~()

attach COType to OType
    def simple?(type COType) Bool
        return type.type~().type?(String)

    def this?(type COType) Bool
        return type.type~().type?(String) && type.type~() == "This"

def nothingType?(type COType) Bool
    return type.type~().type?(String) && type.type~() == "STD::Nothing"

def anyType?(type COType) Bool
    return type.type~().type?(Array) && type.type~() == ["STD::Any"]

// The function turns the operand type into a token.
def oTypeToToken(type OType, withOptionalSignature Bool) Token
    var result Token = const::emptyToken
    tSwitch type.type~()
    case Token
        result = type.type~()
    case Array
        const groups Array = type.type~()
        result = groups[0].replaceText("${")
        const lastIndex Int = groups.length() - 1
        parse index, groupName Token = groups
            result.addString(groupName.text~())
            result.addChar((index == lastIndex).select('}', ','))
    if withOptionalSignature && type.optional?()
        result.text`("<>" + result.text~())
    return result

// The function turns the operand type into a string.
def coTypeToString(type COType, withOptionalSignature Bool) String
    var result String = ""
    tSwitch type.type~()
    case String
        result = type.type~()
    case Array
        result = "${" + type.type~().join(",") + "}"
    if withOptionalSignature && type.optional?()
        result = "<>" + result
    return result

def compileOType(type OType, compiledData CData) COType
    var result <>COType = nothing
    tSwitch type.type~()
    case Token
        result = COType{{
            type       : (type.type~().type!(Token).text~() == "This").select("This", compiledData.getType(type.type~(), false).fullName~()),
            isOptional : type.optional?()
        }}
    case Array
        var groupsSet Set = Set()
        var mainLevelGroups Set = Set()
        parse _, groupName Token = type.type~()
            const group CGroup = compiledData.getGroup(groupName, false)
            if mainLevelGroups.add(group.fullName~())
                errorAlreadyExist(groupName, "group")
            groupsSet.add(group.fullName~())
            parse _, subGroupName String = group.subGroups~()
                groupsSet.add(subGroupName)
        var newGroupsArray Array = []
        parse _, groupName String = groupsSet
            newGroupsArray.addItem(groupName)
        newGroupsArray.sort(true)
        result = COType{{
            type       : newGroupsArray,
            isOptional : type.optional?()
        }}
    default
        unreachable()
    if (result.nothingType?() || result.anyType?()) && result.optional?()
        const resultAsString String = coTypeToString(result, true)
        errorInvalidType(type.oTypeToToken(true), resultAsString, resultAsString[2:])
    return result

// The function compares two types for equality.
def typeEq?(type1, type2 COType, withOptional Bool) Bool
    return type1.simple?() == type2.simple?() && type1.type~() == type2.type~() && (!withOptional || type1.optional?() == type2.optional?())

// The function checks that the two types are equal.
def typeEq!(type1, type2 COType, expression Token, withOptional Bool)
    if !type1.typeEq?(type2, withOptional)
        errorInvalidType(expression, coTypeToString(type1, true), coTypeToString(type2, true))

attach COType to BinarySerializable
    def serialize(type COType, write bytes Bytes)
        if type.simple?()
            true.serialize(bytes)
            type.type~().type!(String).serialize(bytes)
        else
            false.serialize(bytes)
            type.type~().type!(Array).serializeContainer(bytes)
        type.optional?().serialize(bytes)

    def deserialize(noread type COType, bytes Bytes, write position Int) COType
        var currentPosition Int = position
        var result COType = const::dummyCOType
        if Bool.deserialize(bytes, currentPosition)
            result.type`(String.deserialize(bytes, currentPosition))
        else
            result.type`(Array.deserializeContainer(bytes, currentPosition, String))
        result.isOptional`(Bool.deserialize(bytes, currentPosition))
        position = currentPosition
        return result
