module Main

// A type for storing functions from groups.
type GroupFunctions
    // group     String
    // functions Map(String ("+" - default, "-" -  require, other - type name), SimpleFunction)

attach GroupFunctions to FieldGroup
    #alwaysinline
    def group~(functions GroupFunctions) String
        return functions.typeGetItem(0)

    #alwaysinline
    def group`(write functions GroupFunctions, new String) String
        return functions.typePut(0, new)

attach GroupFunctions to FieldFunctions
    #alwaysinline
    def functions~(functions GroupFunctions) Map
        return functions.typeGetItem(1)

    #alwaysinline
    def functions`(write functions GroupFunctions, new <>Map) <>Map
        return functions.typePut(1, new)

#alwaysinline
def groupFunctions(group String, functions Map) GroupFunctions
    return GroupFunctions.fromList({group, functions})
